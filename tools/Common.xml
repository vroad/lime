<interface class="">

<typemap method="in" type="const char*">
  $1 = $input.__s;
</typemap>

<typemap method="in" type="lime::Application*">  {
    $1 = val_to_Application($input);
  }
</typemap>

<typemap method="out" type="lime::Application*">  {
    $result = Application_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::ArrayBufferView*">
  ArrayBufferView tmpArg3;
  {
    bool setResult = tmpArg3.Set ($input);
    $1 = setResult ? &amp;tmpArg3 : NULL;
  }
</typemap>

<typemap method="in" type="lime::OpenGLContext*">  {
    $1 = val_to_OpenGLContext($input);
  }
</typemap>

<typemap method="out" type="lime::OpenGLContext*">  {
    $result = OpenGLContext_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLBuffer*">  {
    $1 = val_to_GLBuffer($input);
  }
</typemap>

<typemap method="out" type="lime::GLBuffer*">  {
    $result = GLBuffer_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLContextHandle*">  {
    $1 = val_to_GLContextHandle($input);
  }
</typemap>

<typemap method="out" type="lime::GLContextHandle*">  {
    $result = GLContextHandle_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLFramebuffer*">  {
    $1 = val_to_GLFramebuffer($input);
  }
</typemap>

<typemap method="out" type="lime::GLFramebuffer*">  {
    $result = GLFramebuffer_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLProgram*">  {
    $1 = val_to_GLProgram($input);
  }
</typemap>

<typemap method="out" type="lime::GLProgram*">  {
    $result = GLProgram_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLRenderbuffer*">  {
    $1 = val_to_GLRenderbuffer($input);
  }
</typemap>

<typemap method="out" type="lime::GLRenderbuffer*">  {
    $result = GLRenderbuffer_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLShader*">  {
    $1 = val_to_GLShader($input);
  }
</typemap>

<typemap method="out" type="lime::GLShader*">  {
    $result = GLShader_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::GLTexture*">  {
    $1 = val_to_GLTexture($input);
  }
</typemap>

<typemap method="out" type="lime::GLTexture*">  {
    $result = GLTexture_to_value($input);
  }
</typemap>

<typemap method="in" type="lime::ImageBuffer*">
  ImageBuffer tmp$1 = ImageBuffer ($input);
  $1 =  &amp;tmp$1;
</typemap>

<typemap method="in" type="lime::Window*">
  $1 = val_to_Window($input);
</typemap>

<typemap method="out" type="lime::Window*">
  $result = Window_to_value($input);
</typemap>

<insert>
<![CDATA[
#include <hx/CFFIPrime.h>
#include <system/CFFIPointer.h>
]]>
</insert>

</interface>